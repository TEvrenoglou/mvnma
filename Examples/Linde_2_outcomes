library(netmeta)
library(tidyverse)
library(rlist)
library(rjags)
library(R2jags)
library(matrixStats)
library(nmajags)

source("mvdata.R")

source("mvnma-internal.R")

source("mvNMA_2out.R")

source("mvNMA_3out.R")

source("mvNMA_4out.R")

source("mvNMA_5out.R")

source("mvnma.R")

source("mvrank.R")

source("VIKOR.R")

source("interpret.vikor.R")

source("hasse.R")

source("league.R")

source("forest.mvnma.R")

source("plot.mvrank.R")


data("Linde2015")


# use 'pairwise' to obtain contrast based data for each one of the five available outcomes

## Early response

p1 <- pairwise(treat = list(treatment1, treatment2, treatment3),
               event = list(resp1, resp2, resp3), 
               n = list(n1, n2, n3),
               studlab = id,
               data = dat.linde2015,
               sm = "OR")



## Early remissions

p2 <- pairwise(treat = list(treatment1, treatment2, treatment3),
               event = list(remi1, remi2, remi3),
               n = list(n1, n2, n3),
               studlab = id,
               data = dat.linde2015,
               sm = "OR")

# Define outcome labels

outlab <- c("Early_Response","Early_Remission")


# Perform analysis in terms of the Efficacy outcomes

p_effic <- list(p1,p2)

 # Use 'mvdata()' to transform the data in suitable JAGS format

data_effic <- mvdata(p_effic)

 # Fit the model combining only the two efficacy outcomes

mvmodel_effic <- mvnma(data = data_effic,
                  reference.group = "Placebo",
                  outlab = outlab[1:2],
                  n.iter = 1000,
                  n.burnin = 100)




## get estimates for Early Response

mvmodel_effic$Early_Response$basic_estimates

mvmodel_effic$Early_Response$heterogeneity

# get outcome correlation

mvmodel_effic$outcome_correlation

# Plot the results for efficacy outcomes

forest.mvnma(mvmodel_effic)

# get all estimates

league <- league(mvmodel_effic)

# print results for Early Response

league$Early_Response

# Generate outcome specific ranking using SUCRA

ranks_sucra <- mvrank(mvmodel_effic,method = "sucra",small.values = c("undesirable","undesirable"))

# or since SUCRA is the default the argument 'method' can be avoided for SUCRAs

ranks_sucra <- mvrank(mvmodel_effic,small.values = c("undesirable","undesirable"))

# get amalgamated ranking (equal weights)

vikor <- vikor.mvnma(ranks_sucra)

vikor

# evaluate the conditions and get the compromise solution
interpret.vikor(vikor)

# plot rankings

plot.mvrank(ranks_sucra,outcome = c(1,2))

# generate hasse diagram 

hasse.mvrank(ranks_sucra)

# repeat for pBV

ranks_pBV <- mvrank(mvmodel_effic,method = "pBV",small.values = c("undesirable","undesirable"))

# plot rankings

plot.mvrank(ranks_pBV,outcome = c(1,2))
